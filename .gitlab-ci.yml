variables:
  GRADLE_OPTS: "-Dorg.gradle.daemon=false"
  REGISTRY_USER: $REGISTRY_USER
  IMAGE_NAME: $IMAGE_NAME
  IMAGE_TAG: latest
  CONTAINER_NAME: $CONTAINER_NAME
  GCP_USERNAME: $GCP_USERNAME
  GCP_STATIC_IP: $GCP_STATIC_IP
  SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"


stages:
  - build
  - test
  - sonarcloud
  - publish
  - deploy

Sonarcloud:
  stage: sonarcloud
  image: gradle:jdk17-alpine
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script: gradle sonarqube --info --stacktrace
  tags:
    - setup
  allow_failure: true

Build:
  stage: build
  image: gradle:jdk17-alpine
  before_script:
    - apk add git
    - echo `pwd`
    - export GRADLE_USER_HOME=`pwd`/.gradle
  script:
    - gradle wrapper
    - ./gradlew assemble
  tags:
    - setup
  artifacts:
    when: always
    paths:
      - build/libs/*.jar
    expire_in: 1 week


Test:
  stage: test
  image: gradle:jdk17-alpine
  dependencies:
    - Build
  services:
    - "postgres:latest"
  before_script:
    - echo `pwd`
    - export GRADLE_USER_HOME=`pwd`/.gradle
    - export SPRING_PROFILES_ACTIVE=test
  script:
    - gradle check --info --stacktrace
    - gradle test
  tags:
    - setup
  artifacts:
    when: always
    reports:
      junit: build/test-results/test/**/TEST-*.xml
  coverage: '/Total.*?([0-9]{1,3})%/'


Publish:
  stage: publish
  image: docker:latest
  services:
    - docker:dind
  dependencies:
    - Build
  before_script:
    - echo $DOCKER_PASSWORD| docker login -u $REGISTRY_USER --password-stdin docker.io
    - apk add git
  script:
    - docker build --build-arg PRODUCTION=$PRODUCTION --build-arg JDBC_DATABASE_PASSWORD=$JDBC_DATABASE_PASSWORD --build-arg JDBC_DATABASE_URL=$JDBC_DATABASE_URL --build-arg JDBC_DATABASE_USERNAME=$JDBC_DATABASE_USERNAME -t $REGISTRY_USER/$IMAGE_NAME:$IMAGE_TAG .
    - docker push $REGISTRY_USER/$IMAGE_NAME:$IMAGE_TAG
  tags:
    - dind


Deploy:
  stage: deploy
  image: alpine:latest
  before_script:
    - chmod 400 $SSH_KEY
    - apk update && apk add openssh-client
  script:
    - ssh -o StrictHostKeyChecking=no -i $SSH_KEY $GCP_USERNAME@$GCP_STATIC_IP "
      sudo docker container rm -f $CONTAINER_NAME || true &&
      sudo docker image rm -f $REGISTRY_USER/$IMAGE_NAME:$IMAGE_TAG || true &&
      sudo docker run --name $CONTAINER_NAME -d -p 8084:8084 $REGISTRY_USER/$IMAGE_NAME:$IMAGE_TAG"
  tags:
    - payoff
